name: Update validation reference plots on a tag

on:
  push:
    tags:
      - '*'
  
concurrency:
  #When a PR is pushed too multiple times in a short period, this would usually trigger multiple CI runs
  #This setting cancels any in-progress CI when a new push is performed
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /opt/
    #run inside a container that has the prerequisites already installed
    container:
      image: docker://ghcr.io/hyperk/hk-software:0.0.2
      credentials:
           username: ${{ github.actor }}
           password: ${{ secrets.CONTAINER_REPO }}
      env:
        #TRAVIS_COMMIT: ${{ github.sha }}
        TRAVIS_PULL_REQUEST: ${{ github.event.number }}
        TRAVIS_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        GitHubToken: ${{ secrets.VALIDATION_PR }}
        ValidationPath: /opt/Validation/
    steps:
      # Print all the info about the action
      - name: Logging
        run: |
          echo "Test print"
        #echo "${{toJSON(github)}}"
    
      - name: Get repo to checkout
        id: checkout_repo
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ github.event_name == 'pull_request_target' }}
          if_true: ${{ github.event.pull_request.head.repo.full_name }}
          if_false: ${{ github.repository }}
          
      - name: Get SHA to checkout
        id: checkout_sha
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ github.event_name == 'pull_request_target' }}
          if_true: ${{ github.event.pull_request.head.sha }}
          if_false: ${{ github.sha }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout WCSim
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.checkout_sha.outputs.value }}
          repository: ${{ steps.checkout_repo.outputs.value }}
          
      - name: Link WCSim directory
        run: |
          mkdir /opt/WCSim/
          ln -s ${GITHUB_WORKSPACE}/ /opt/WCSim/src

      - name: Checkout WCSim/Validation
        run: |
          cd /opt/
          git clone --depth 1 https://github.com/WCSim/Validation.git -b master --single-branch

      - name: Hack hk-software setup (waiting for new release)
        run: |
          cd /usr/local/hk/hk-software/install-Linux_x86_64-gcc_8-python_3.8.13/
          sed -i -e 's/LD_LIBRARY_PATH=LD_LIBRARY_PATH/LD_LIBRARY_PATH=$LD_LIBRARY_PATH/' setup.sh

      - name: Setup prerequisites setup script
        run: |
          cd /opt/
          echo source /usr/local/hk/Geant4/install-Linux_x86_64-gcc_8-python_3.8.13/bin/geant4.sh > /opt/setup.sh
          echo source /usr/local/hk/hk-pilot/setup.sh >> /opt/setup.sh
          echo source /usr/local/hk/hk-software/install-Linux_x86_64-gcc_8-python_3.8.13/setup.sh >> /opt/setup.sh

      - name: Install HepMC3
        run: |
          cd /etc/yum.repos.d/
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
          yum install -y HepMC3 HepMC3-devel HepMC3-search HepMC3-search-devel HepMC3-interfaces-devel HepMC3-doc

      - name: Print environment
        run: |
          source /opt/setup.sh
          cd /opt/WCSim
          export TRAVIS_COMMIT=${{ steps.checkout_sha.outputs.value }}
          env
          pwd
          ls -a

      - name: Test build
        run: |
          source /opt/setup.sh
          cd /opt/WCSim
          python3 /opt/Validation/build.py --option 0
          echo source /opt/WCSim/install/bin/this_wcsim.sh >> /opt/setup.sh

      - name: Setup branch
        run: |
          cd /opt/Validation
          git switch -c new_ref
          git push https://tdealtry:${GitHubToken}@github.com/WCSim/Validation.git new_ref

  physics:
    needs: build
    strategy:
      fail-fast: true
      matrix:
        physics_job: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 25, 26, 27]

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /opt/
    #run inside a container that has the prerequisites already installed
    container:
      image: docker://ghcr.io/hyperk/hk-software:0.0.2
      credentials:
           username: ${{ github.actor }}
           password: ${{ secrets.CONTAINER_REPO }}
      env:
        #TRAVIS_COMMIT: ${{ github.sha }}
        TRAVIS_PULL_REQUEST: ${{ github.event.number }}
        TRAVIS_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        GitHubToken: ${{ secrets.VALIDATION_PR }}
        ValidationPath: /opt/Validation/
    steps:
      - name: Get repo to checkout
        id: checkout_repo
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ github.event_name == 'pull_request_target' }}
          if_true: ${{ github.event.pull_request.head.repo.full_name }}
          if_false: ${{ github.repository }}

      - name: Get SHA to checkout
        id: checkout_sha
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ github.event_name == 'pull_request_target' }}
          if_true: ${{ github.event.pull_request.head.sha }}
          if_false: ${{ github.sha }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout WCSim
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.checkout_sha.outputs.value }}
          repository: ${{ steps.checkout_repo.outputs.value }}

      - name: Link WCSim directory
        run: |
          mkdir /opt/WCSim/
          ln -s ${GITHUB_WORKSPACE}/ /opt/WCSim/src

      - name: Checkout WCSim/Validation
        run: |
          cd /opt/
          git clone --depth 1 https://github.com/WCSim/Validation.git -b master --single-branch

      - name: Hack hk-software setup (waiting for new release)
        run: |
          cd /usr/local/hk/hk-software/install-Linux_x86_64-gcc_8-python_3.8.13/
          sed -i -e 's/LD_LIBRARY_PATH=LD_LIBRARY_PATH/LD_LIBRARY_PATH=$LD_LIBRARY_PATH/' setup.sh

      - name: Setup prerequisites setup script
        run: |
          cd /opt/
          echo source /usr/local/hk/Geant4/install-Linux_x86_64-gcc_8-python_3.8.13/bin/geant4.sh > /opt/setup.sh
          echo source /usr/local/hk/hk-pilot/setup.sh >> /opt/setup.sh
          echo source /usr/local/hk/hk-software/install-Linux_x86_64-gcc_8-python_3.8.13/setup.sh >> /opt/setup.sh

      - name: Install HepMC3
        run: |
          cd /etc/yum.repos.d/
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
          yum install -y HepMC3 HepMC3-devel HepMC3-search HepMC3-search-devel HepMC3-interfaces-devel HepMC3-doc

      - name: Build, with added geometry checks
        run: |
          source /opt/setup.sh
          cd /opt/WCSim
          python3 /opt/Validation/build.py --option 1
          echo source /opt/WCSim/install/bin/this_wcsim.sh >> /opt/setup.sh

      - name: Run physics
        run: |
          source /opt/setup.sh
          cd /opt/Validation
          make
          cd /opt/WCSim/install
          echo ${{ matrix.physics_job }}
          python /opt/Validation/MakeReference.py --job-number ${{ matrix.physics_job }}

      - name: WCSim output
        run: cat /opt/WCSim/install/${{ matrix.physics_job }}.out

  create_pr:
    name: Create PR
    needs: physics
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /opt/
    steps:
      - name: Checkout Validation package
        run: |
          cd /opt/
          git clone --depth 1 https://github.com/WCSim/Validation.git -b new_ref --single-branch

      - name: Create PR
        run: |
          cd /opt/Validation/
          gh pr create -B master -H new_ref --title 'New reference files from WCSim tag: ${{  github.ref_name }}' --body 'Created by Github action' -a tdealtry -r tdealtry --label 'auto created'
        env:
          GITHUB_TOKEN: ${{ secrets.VALIDATION_PR }}
